generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Users {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  super_adm  Boolean  @default(false)
  picture    String?
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  logs       Logs[]
  pages      Pages[]
  posts      Posts[]
}

model Categories {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  color      String   @default("#013F71")
  icon       String?
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  posts      Posts[]
}

model Posts {
  id               Int        @id @default(autoincrement())
  title            String
  content          String
  excerpt          String?
  slug             String     @unique
  featured_image   String?
  social_image     String?
  status           String     @default("draft")
  author_id        Int
  category_id      Int
  meta_title       String?
  meta_description String?
  key_word_seo     String?
  view_count       Int        @default(0)
  is_featured      Boolean    @default(false)
  is_pinned        Boolean    @default(false)
  reading_time     Int?
  tags             String?
  published_at     DateTime?
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  category         Categories @relation(fields: [category_id], references: [id])
  author           Users      @relation(fields: [author_id], references: [id])
}

model Files {
  id            Int      @id @default(autoincrement())
  name          String
  url           String
  size          Int?
  type          String?
  path          String?  // Caminho físico do arquivo no servidor
  subFolder     String?  // Subpasta onde o arquivo está armazenado
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  cloudinary_id String?  // Mantido para compatibilidade
}

model Menus {
  id         Int         @id @default(autoincrement())
  name       String
  location   String      @unique
  is_active  Boolean     @default(true)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  menu_items MenuItems[]
}

model MenuItems {
  id         Int         @id @default(autoincrement())
  menu_id    Int
  parent_id  Int?
  title      String
  url        String?
  target     String      @default("_self")
  order      Int         @default(0)
  is_active  Boolean     @default(true)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  parent     MenuItems?  @relation("MenuItemParent", fields: [parent_id], references: [id])
  children   MenuItems[] @relation("MenuItemParent")
  menu       Menus       @relation(fields: [menu_id], references: [id], onDelete: Cascade)
}

model Contacts {
  id           Int      @id @default(autoincrement())
  location     String
  type         String
  title        String?
  link         String
  order        Int
  custom_color String?
  is_active    Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@unique([location, order])
}

model HomeAbout {
  id                   Int      @id @default(autoincrement())
  title                String   @default("Sobre Andre Paravela")
  content              String
  photo                String?
  download_button_text String   @default("Baixe o novo material")
  download_file        String?
  is_active            Boolean  @default(true)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
}

model BannerWhatsApp {
  id               Int      @id @default(autoincrement())
  title            String   @default("Acesse nosso grupo de WhatsApp")
  description      String?
  button_text      String   @default("Entrar para o grupo")
  whatsapp_link    String   @default("https://wa.me/5511999999999")
  background_image String?
  background_color String   @default("#013F71")
  is_active        Boolean  @default(true)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
}

model Pages {
  id               Int       @id @default(autoincrement())
  title            String
  content          String
  slug             String    @unique
  excerpt          String?
  featured_image   String?
  social_image     String?
  status           String    @default("draft")
  author_id        Int
  meta_title       String?
  meta_description String?
  key_word_seo     String?
  view_count       Int       @default(0)
  is_featured      Boolean   @default(false)
  template         String    @default("default")
  custom_css       String?
  custom_js        String?
  published_at     DateTime?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  author           Users     @relation(fields: [author_id], references: [id])
}

model Logs {
  id          Int      @id @default(autoincrement())
  user_id     Int?
  action      String
  table_name  String
  record_id   Int?
  record_name String?
  old_data    String?
  new_data    String?
  ip_address  String?
  user_agent  String?
  description String?
  created_at  DateTime @default(now())
  user        Users?   @relation(fields: [user_id], references: [id])
}
